<<<<<<< HEAD
=======
paths:
  /api/projects/{project_pk}/members/{user_pk}/pauses:
    get:
      $ref: "./resources/pauses.yaml#/paths/~1api~1projects~1{project_pk}~1members~1{user_pk}~1pauses/get"
      x-fern-sdk-group-name:
        - projects
        - pauses
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/pauses.yaml#/paths/~1api~1projects~1{project_pk}~1members~1{user_pk}~1pauses/post"
      x-fern-sdk-group-name:
        - projects
        - pauses
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/projects/{project_pk}/members/{user_pk}/pauses/{id}:
    get:
      $ref: "./resources/pauses.yaml#/paths/~1api~1projects~1{project_pk}~1members~1{user_pk}~1pauses~1{id}/get"
      x-fern-sdk-group-name:
        - projects
        - pauses
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      $ref: "./resources/pauses.yaml#/paths/~1api~1projects~1{project_pk}~1members~1{user_pk}~1pauses~1{id}/patch"
      x-fern-sdk-group-name:
        - projects
        - pauses
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/pauses.yaml#/paths/~1api~1projects~1{project_pk}~1members~1{user_pk}~1pauses~1{id}/delete"
      x-fern-sdk-group-name:
        - projects
        - pauses
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public
  /api/version:
    get:
      $ref: "./resources/versions.yaml#/paths/~1api~1version/get"
      x-fern-sdk-group-name: versions
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
  /api/current-user/product-tour:
    get:
      $ref: "./resources/users.yaml#/paths/~1api~1current-user~1product-tour/get"
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: get_product_tour
      x-fern-audiences:
        # internal is not used in the default generator - we skip function generation for this endpoint because it's not user facing
        - internal
    patch:
      $ref: "./resources/users.yaml#/paths/~1api~1current-user~1product-tour/patch"
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: update_product_tour
      x-fern-audiences:
        - internal

  /api/prompts/:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts/get"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts/post"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/prompts/{id}:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}/get"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}/patch"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}/delete"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/prompts/{id}/versions:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions/get"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions/post"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/prompts/{id}/versions/{version_id}:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions~1{version_id}/get"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions~1{version_id}/patch"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions~1{version_id}/delete"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/prompts/{prompt_id}/versions/{version_id}/cost-estimate:
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{prompt_id}~1versions~1{version_id}~1cost-estimate/get"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: cost_estimate
      x-fern-audiences:
        - public

  /api/prompts/{prompt_id}/versions/{version_id}/refine:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{prompt_id}~1versions~1{version_id}~1refine/get"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: get_refined_prompt
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{prompt_id}~1versions~1{version_id}~1refine/post"
      x-fern-sdk-group-name:
        - prompts
        - versions
      x-fern-sdk-method-name: refine_prompt
      x-fern-audiences:
        - public

  /api/prompts/{id}/versions/{version_id}/inference-runs:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions~1{version_id}~1inference-runs/get"
      x-fern-sdk-group-name:
        - prompts
        - runs
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1prompts~1{id}~1versions~1{version_id}~1inference-runs/post"
      x-fern-sdk-group-name:
        - prompts
        - runs
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/inference-runs/{pk}/indicators:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1inference-runs~1{pk}~1indicators/get"
      x-fern-sdk-group-name:
        - prompts
        - indicators
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public

  /api/inference-runs/{pk}/indicators/{indicator_key}:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1inference-runs~1{pk}~1indicators~1{indicator_key}/get"
      x-fern-sdk-group-name:
        - prompts
        - indicators
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public

  /api/model-provider-connections/:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-provider-connections/get"
      x-fern-sdk-group-name: model_providers
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public

    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-provider-connections/post"
      x-fern-sdk-group-name: model_providers
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/model-provider-connections/{pk}:
    get:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-provider-connections~1{pk}/get"
      x-fern-sdk-group-name: model_providers
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-provider-connections~1{pk}/patch"
      x-fern-sdk-group-name: model_providers
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-provider-connections~1{pk}/delete"
      x-fern-sdk-group-name: model_providers
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/model-run/batch-predictions:
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-run~1batch-predictions/post"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: batch_predictions
      x-fern-audiences:
        - public
  /api/model-run/batch-failed-predictions:
    post:
      $ref: "./resources/prompts.yaml#/paths/~1api~1model-run~1batch-failed-predictions/post"
      x-fern-sdk-group-name: prompts
      x-fern-sdk-method-name: batch_failed_predictions
      x-fern-audiences:
        - public

  /api/comments/:
    get:
      $ref: "./resources/comments.yaml#/paths/~1api~1comments/get"
      x-fern-sdk-group-name: comments
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/comments.yaml#/paths/~1api~1comments/post"
      x-fern-sdk-group-name: comments
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
  /api/comments/{id}:
    get:
      $ref: "./resources/comments.yaml#/paths/~1api~1comments~1{id}/get"
      x-fern-sdk-group-name: comments
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      $ref: "./resources/comments.yaml#/paths/~1api~1comments~1{id}/patch"
      x-fern-sdk-group-name: comments
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/comments.yaml#/paths/~1api~1comments~1{id}/delete"
      x-fern-sdk-group-name: comments
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public
  "/api/annotations/{id}/":
    get:
      summary: Get annotation by its ID
      description: >
        
        Tasks can have multiple annotations. Use this call to retrieve a specific annotation using its ID. 
        
        
        You can find the ID in the Label Studio UI listed at the top of the annotation in its tab. It is also listed in the History panel when viewing the annotation. Or you can use [Get all task annotations](list) to find all annotation IDs.  
    patch:
      summary: Update an annotation
      description: >
        
        Update attributes for an existing annotation. 
        
        
        You will need to supply the annotation's unique ID. You can find the ID in the Label Studio UI listed at the top of the annotation in its tab. It is also listed in the History panel when viewing the annotation. Or you can use [Get all task annotations](list) to find all annotation IDs.  


        For information about the JSON format used in the result, see [Label Studio JSON format of annotated tasks](https://labelstud.io/guide/export#Label-Studio-JSON-format-of-annotated-tasks).
    delete:
      summary: Delete annotation
      description: >
        
        Delete an annotation. 
        
        
        <Warning>This action can't be undone!</Warning>


        You will need to supply the annotation's unique ID. You can find the ID in the Label Studio UI listed at the top of the annotation in its tab. It is also listed in the History panel when viewing the annotation. Or you can use [Get all task annotations](list) to find all annotation IDs.  

  "/api/tasks/{id}/annotations/":
    get:
      summary: Get all task annotations
      description: >
        
        List all annotations for a task.


        You will need to supply the task ID. You can find this in Label Studio by opening a task and checking the URL. It is also listed at the top of the labeling interface. Or you can use [Get tasks list](../tasks/list). 
    post:
      summary: Create annotation
      description: >
        
        Add annotations to a task like an annotator does. 


        You will need to supply the task ID. You can find this in Label Studio by opening a task and checking the URL. It is also listed at the top of the labeling interface. Or you can use [Get tasks list](../tasks/list). 
        
        
        
        The content of the result field depends on your labeling configuration. For example, send the following data as part of your POST 

        request to send an empty annotation with the ID of the user who completed the task:


        ```json

        {

        "result": {},

        "was_cancelled": true,

        "ground_truth": true,

        "lead_time": 0,

        "task": 0

        "completed_by": 123

        } 

        ```

  /api/users/:
    get:
      summary: List users
      description: >
        
        List all users in your Label Studio organization. 
    post:
      operationId: api_users_create
      summary: Create a user
      description: >
        
        Create a user in Label Studio.

  "/api/users/{id}/":
    get:
      summary: Get user info
      description: >
        
        Get info about a specific Label Studio user. 
        
        You will need to provide their user ID. You can find a list of all user IDs using [List users](list). 
    patch:
      summary: Update user details
      description: >
        
        Update details for a specific Label Studio user, such as their name or contact information. 


        You will need to provide their user ID. You can find a list of all user IDs using [List users](list). 
    delete:
      summary: Delete user
      description: >
        
        Delete a specific Label Studio user.


        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).


        <Warning>Use caution when deleting a user, as this can cause issues such as breaking the "Annotated by" filter or leaving orphaned records.</Warning>

  /api/current-user/reset-token/:
    post:
      summary: Reset user token
      description: Reset your access token or API key. When reset, any scripts or automations you have in place will need to be updated with the new key.

  /api/current-user/token:
    get:
      summary: Get user token
      description: Get a access token to authenticate to the API as the current user. To find this in the Label Studio interface, click **Account & Settings** in the upper right. For more information, see [Access Token](https://labelstud.io/guide/user_account#Access-token).

  /api/current-user/whoami:
    get:
      summary: Retrieve my user
      description: Get information about your user account, such as your username, email, and user ID.

  /api/dm/views/:
    get:
      summary: List views
      description: >
        
        List all views for a specific project. A view is a tab in the Data Manager where you can set filters and customize which tasks and information appears. 
        
        
        You will need to provide the project ID. You can find this in the URL when viewing the project in Label Studio, or you can use [List all projects](../projects/list). 
    post:
      summary: Create view
      description: >
        
        Create a new Data Manager view for a specific project. A view is a tab in the Data Manager where you can set filters and customize what tasks and information appears. 
        
        
        You will need to provide the project ID. You can find this in the URL when viewing the project in Label Studio, or you can use [List all projects](../projects/list). 

  /api/dm/views/reset/:
    delete:
      summary: Delete all project views
      description: >
        
        Delete all views for a specific project. A view is a tab in the Data Manager where you can set filters and customize what tasks appear. 
        
        
        You will need to provide the project ID. You can find this in the URL when viewing the project in Label Studio, or you can use [List all projects](../projects/list).

  "/api/dm/views/{id}/":
    get:
      summary: Get view details
      description: >
        
        Get the details about a specific Data Manager view (tab). You will need to supply the view ID. You can find this using [List views](list).  
    patch:
      summary: Update view
      description: >
        
        You can update a specific Data Manager view (tab) with additional filters and other customizations. You will need to supply the view ID. You can find this using [List views](list).  
    delete:
      summary: Delete view
      description: Delete a specific Data Manager view (tab) by ID. You can find the view using [List views](list).

  /api/projects/:
    get:
      summary: List all projects
      description: >
        
        Return a list of the projects within your organization.


        To perform most tasks with the Label Studio API, you must specify the project ID, sometimes referred to as the `pk`. The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using this API call. 


        To retrieve a list of your Label Studio projects, update the following command to match your own environment.

        Replace the domain name, port, and authorization token, then run the following from the command line:

        ```bash

        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization: Token abc123'

        ```
    post:
      summary: Create new project
      description: >
        
        Create a project and set up the labeling interface. For more information about setting up projects, see the following:

        * [Create and configure projects](https://labelstud.io/guide/setup_project)

        * [Configure labeling interface](https://labelstud.io/guide/setup)

        * [Project settings](https://labelstud.io/guide/project_settings)


        ```bash

        curl -H Content-Type:application/json -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects'     --data '{"label_config": "<View>[...]</View>"}'

        ```

  "/api/projects/{id}/":
    get:
      summary: Get project by ID
      description: Retrieve information about a specific project by project ID. The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](list).
    delete:
      summary: Delete project
      description: >
        
        Delete a project by specified project ID. Deleting a project permanently removes all tasks, annotations, and project data from Label Studio.
        
        
        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](list). 
    patch:
      summary: Update a project
      description: >
        
        Update the project settings for a specific project. For more information, see the following:

        * [Create and configure projects](https://labelstud.io/guide/setup_project)

        * [Configure labeling interface](https://labelstud.io/guide/setup)

        * [Project settings](https://labelstud.io/guide/project_settings)


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](list). 


        <Warning>
        
        If you are modifying the labeling config for project that has in-progress work, note the following:
        
        * You cannot remove labels or change the type of labeling being performed unless you delete any existing annotations that are using those labels. 
        
        * If you make changes to the labeling configuration, any tabs that you might have created in the Data Manager are removed.
        
        </Warning>

  "/api/projects/{id}/validate/":
    post:
      summary: Validate project labeling config
      description: >
        
        Determine whether the label configuration for a specific project is valid. For more information about setting up labeling configs, see [Configure labeling interface](https://labelstud.io/guide/setup) and our [Tags reference](https://labelstud.io/tags/).


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](list). 

  "/api/import/file-upload/{id}":
    get:
      summary: Get file upload
      description: Retrieve details about a specific uploaded file. To get the file upload ID, use [Get files list](list).
    delete:
      summary: Delete file upload
      description: Delete a specific uploaded file. To get the file upload ID, use [Get files list](list).
    patch:
      summary: Update file upload
      description: >
        
        Update a specific uploaded file. To get the file upload ID, use [Get files list](list). 


        You will need to include the file data in the request body. For example:

        ```bash

        curl -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/import/file-upload/245' -F 'file=@path/to/my_file.csv'

        ```
  
  "/api/projects/{id}/file-uploads":
    get:
      summary: Get files list
      description: >
        
        Retrieve the list of uploaded files used to create labeling tasks for a specific project. These are files that have been uploaded directly to Label Studio. 


        You must provide a project ID. The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../list). 
    delete:
      summary: Delete files
      description: >
        
        Delete uploaded files for a specific project. These are files that have been uploaded directly to Label Studio. 


        You must provide a project ID. The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../list). 

  "/data/upload/{filename}":
    get:
      summary: Download file
      description: Download a specific uploaded file. If you aren't sure of the file name, try [Get files list](list) first.

  "/api/projects/{id}/export":
    get:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{id}~1export/get"
      x-fern-sdk-group-name:
        - projects
        - exports
      x-fern-sdk-method-name: download_sync
      x-fern-audiences:
        - public

  "/api/projects/{id}/export/formats":
    get:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{id}~1export~1formats/get"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: list_formats
      x-fern-audiences:
        - public

  /api/projects/{project_id}/exports:
    get:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports/get"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports/post"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/projects/{project_id}/exports/{export_pk}/download:
    get:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports~1{export_pk}~1download/get"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: download
      x-fern-audiences:
        - public

  /api/projects/{project_id}/exports/{export_pk}:
    get:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports~1{export_pk}/get"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    delete:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports~1{export_pk}/delete"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/projects/{project_id}/exports/{export_pk}/convert:
    post:
      $ref: "./resources/exports.yaml#/paths/~1api~1projects~1{project_id}~1exports~1{export_pk}~1convert/post"
      x-fern-sdk-group-name: 
        - projects
        - exports
      x-fern-sdk-method-name: convert
      x-fern-audiences:
        - public

  /api/ml/:
    get:
      summary: List ML backends
      description: >
        
        List all configured Machine Learning (ML) backends for a specific project by ID. For more information about ML backends, see [Machine learning integration](https://labelstud.io/guide/ml). 



        You will need to provide the project ID. This can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list).
    post:
      summary: Add ML backend
      description: >
        
        Add an ML backend to a project. For more information about what you need to configure when adding an ML backend, see [Connect the model to Label studio](https://labelstud.io/guide/ml#Connect-the-model-to-Label-Studio).
        
        
        <Note>If you are using Docker Compose, you may need to adjust your ML backend URL. See [localhost and Docker containers](https://labelstud.io/guide/ml#localhost-and-Docker-containers).</Note>


        <Note>If you are using files that are located in the cloud, local storage, or uploaded to Label Studio, you must configure your environment variables to allow the ML backend to interact with those files. See [Allow the ML backend to access Label Studio](https://labelstud.io/guide/ml#Allow-the-ML-backend-to-access-Label-Studio-data).</Note>

  "/api/ml/{id}":
    get:
      summary: Get ML backend
      description: >
        
        Get details about a specific ML backend. You will need to specify an ID for the backend connection. You can find this using [List ML backends](list). 


        For more information, see [Machine learning integration](https://labelstud.io/guide/ml).
    patch:
      summary: Update ML backend
      description: >
        
        Update the ML backend parameters. You will need to specify an ID for the backend connection. You can find this using [List ML backends](list).


        For more information, see [Machine learning integration](https://labelstud.io/guide/ml).
    delete:
      summary: Remove ML backend
      description: >
        
        Remove an existing ML backend connection. You will need to specify an ID for the backend connection. You can find this using [List ML backends](list).


        For more information, see [Machine learning integration](https://labelstud.io/guide/ml).

  "/api/ml/{id}/interactive-annotating":
    post:
      summary: Request interactive annotations
      description: >

        Enable interactive pre-annotations for a specific task. 


        ML-assisted labeling with interactive pre-annotations works with image segmentation and object detection tasks using rectangles, ellipses, polygons, brush masks, and keypoints, as well as with HTML and text named entity recognition tasks. Your ML backend must support the type of labeling that you’re performing, recognize the input that you create, and be able to respond with the relevant output for a prediction. For more information, see [Interactive pre-annotations](https://labelstud.io/guide/ml.html#Interactive-pre-annotations).


        Before you can use interactive annotations, it must be enabled for you ML backend connection (`"is_interactive": true`). 
        
        
        You will need the task ID and the ML backend connection ID. The task ID is available from the Label Studio URL when viewing the task, or you can retrieve it programmatically with [Get task list](../tasks/list). The ML backend connection ID is available via [List ML backends](list).

  "/api/ml/{id}/train":
    post:
      summary: Start training
      description: >
        
        After you connect a model to Label Studio as a machine learning backend and annotate at least one task, you can start training the model. Training logs appear in stdout and the console.


        For more information, see [Model training](https://labelstud.io/guide/ml.html#Model-training).


        You will need to specify an ID for the backend connection. You can find this using [List ML backends](list).

  "/api/ml/{id}/versions":
    get:
      summary: Get model versions
      description: >
        
        Get available versions of the model. You will need to specify an ID for the backend connection. You can find this using [List ML backends](list).

  /api/predictions/:
    get:
      summary: List predictions
      description: >

        Get a list of all predictions. You can optionally filter these by task or by project. If you want to filter, you will need the project ID and/or task ID. Both of these can be found in the Label Studio URL when viewing a task, or you can use [List all projects](../projects/list) and [Get tasks list](../tasks/list).


        <Note>The terms "predictions" and pre-annotations" are used interchangeably.</Note>


        Predictions can be [imported directly into Label Studio](https://labelstud.io/guide/predictions) or [generated by a connected ML backend](https://labelstud.io/guide/ml.html#Pre-annotations-predictions). 
        
        
        To import predictions via the API, see [Create prediction](create).
    post:
      summary: Create prediction
      description: >

        If you have predictions generated for your dataset from a model, either as pre-annotated tasks or pre-labeled tasks, you can import the predictions with your dataset into Label Studio for review and correction.


        To import predicted labels into Label Studio, you must use the [Basic Label Studio JSON format](https://labelstud.io/guide/tasks#Basic-Label-Studio-JSON-format) and set up your tasks with the predictions JSON key. The Label Studio ML backend also outputs tasks in this format. 


        #### JSON format for predictions
        
        Label Studio JSON format for pre-annotations must contain two sections:
        
        * A data object which references the source of the data that the pre-annotations apply to. This can be a URL to an audio file, a pre-signed cloud storage link to an image, plain text, a reference to a CSV file stored in Label Studio, or something else. 
        
        * A predictions array that contains the pre-annotation results for the different types of labeling. See how to add results to the predictions array.
        
        
        For more information, see [the JSON format reference in the Label Studio documentation](https://labelstud.io/guide/predictions#JSON-format-for-pre-annotations)

  "/api/predictions/{id}/":
    get:
      summary: Get prediction details
      description: >
        
        Get details about a specific prediction by its ID. To find the prediction ID, use [List predictions](list).


        For information about the prediction format, see [the JSON format reference in the Label Studio documentation](https://labelstud.io/guide/predictions#JSON-format-for-pre-annotations). 
    patch:
      summary: Update prediction
      description: >
        
        Update a prediction. To find the prediction ID, use [List predictions](list).


        For information about the prediction format, see [the JSON format reference in the Label Studio documentation](https://labelstud.io/guide/predictions#JSON-format-for-pre-annotations). 
    delete:
      summary: Delete prediction
      description: >
        
        Delete a prediction. To find the prediction ID, use [List predictions](list).

  "/api/projects/{id}/import":
    post:
      summary: Import tasks
      description: >
        
        Use this API endpoint to import labeling tasks in bulk. Note that each POST request is limited at 250K tasks and 200 MB.

        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        <Note>
        
        Imported data is verified against a project *label_config* and must include all variables that were used in the *label_config*. 
        
        
        For example, if the label configuration has a *$text* variable, then each item in a data object must include a `text` field.

        </Note>


        There are three possible ways to import tasks with this endpoint:


        #### 1. **POST with data**

        Send JSON tasks as POST data. Only JSON is supported for POSTing files directly.


        Update this example to specify your authorization token and Label Studio instance host, then run the following from

        the command line:


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"text": "Some text 1"}, {"text": "Some text 2"}]'

        ```


        #### 2. **POST with files**

        Send tasks as files. You can attach multiple files with different names.


        - **JSON**: text files in JavaScript object notation format

        - **CSV**: text files with tables in Comma Separated Values format

        - **TSV**: text files with tables in Tab Separated Value format

        - **TXT**: simple text files are similar to CSV with one column and no header, supported for projects with one source only


        Update this example to specify your authorization token, Label Studio instance host, and file name and path,

        then run the following from the command line:


        ```bash

        curl -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects/1/import' -F 'file=@path/to/my_file.csv'

        ```


        #### 3. **POST with URL**

        You can also provide a URL to a file with labeling tasks. Supported file formats are the same as in option 2.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"url": "http://example.com/test1.csv"}, {"url": "http://example.com/test2.csv"}]'

        ```


        <br>

  "/api/projects/{id}/imports/{import_pk}/":
    get:
      summary: Get project import info
      description: >
        
        Get information about an async project import operation. This can be especially useful to monitor status, as large import jobs can take time. 


        You will need the project ID and the unique ID of the import operation. 
        
        
        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        The import ID is returned as part of the response when you call [Import tasks](import-tasks). 

      parameters:
        - name: id
          in: path
          description: The project ID.

  "/api/projects/{id}/tasks/":
    delete:
      summary: Delete all tasks
      description: >
        
        Delete all tasks from a specific project.


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 

      x-fern-sdk-group-name: tasks

  /api/tasks/:
    get:
      summary: Get task list
      description: >
        
        Retrieve a list of tasks. 
        
        
        You can use the query parameters to filter the list by project and/or view (a tab within the Data Manager). You can also optionally add pagination to make the response easier to parse. 
        
        
        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). The view ID can be found using [List views](../views/list).

      responses:
        200:
          description: List of Tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    description: List of tasks, each task contains predictions and annotations if `fields` query parameter is set to `all`
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
              examples:
                response:
                  value:
                    tasks:
                      - predictions:
                          - result: [ { "from_name": "sentiment", "to_name": "text", "type": "choices", "value": { "value": { "choices": [ "POSITIVE" ] } } } ]
                            score: 0.9
                            model_version: "1.0"
                            task: 1
                            created_at: "2021-01-01T00:00:00Z"
                            updated_at: "2021-01-01T00:00:00Z"
                        annotations:
                          - result: [ { "from_name": "sentiment", "to_name": "text", "type": "choices", "value": { "value": { "choices": [ "POSITIVE" ] } } } ]
                            created_at: "2021-01-01T00:00:00Z"
                            updated_at: "2021-01-01T00:00:00Z"
                            completed_by: 1
                            updated_by: 1
                            was_cancelled: false
                            ground_truth: false
                            lead_time: 12.34
    post:
      summary: Create task
      description: >
        
        Create a new labeling task in Label Studio.


        The data you provide depends on your labeling config and data type. 
        
        
        You will also need to provide a project ID. The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 

  "/api/tasks/{id}/":
    get:
      summary: Get task
      description: >
        
        Get task data, metadata, annotations and other attributes for a specific labeling task by task ID.

        The task ID is available from the Label Studio URL when viewing the task, or you can retrieve it programmatically with [Get task list](list). 
    delete:
      summary: Delete task
      description: >
        
        Delete a task in Label Studio. 
        
        
        You will need the task ID. This is available from the Label Studio URL when viewing the task, or you can retrieve it programmatically with [Get task list](list). 


        <Warning>This action cannot be undone.</Warning>
    patch:
      summary: Update task
      description: >
        
        Update the attributes of an existing labeling task.


        You will need the task ID. This is available from the Label Studio URL when viewing the task, or you can retrieve it programmatically with [Get task list](list). 

  /api/storages/azure/:
    get:
      summary: List import storages
      description: >
        
        You can connect your Microsoft Azure Blob storage container to Label Studio as a source storage or target storage. Use this API request to get a list of all Azure import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new source storage connection to Microsoft Azure Blob storage. 
        
        
        For information about the required fields and prerequisites, see [Microsoft Azure Blob storage](https://labelstud.io/guide/storage#Microsoft-Azure-Blob-storage) in the Label Studio documentation. 


        <Info>Ensure you configure CORS before adding cloud storage. This ensures you will be able to see the content of the data rather than just a link.</Info>


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>

  /api/storages/azure/validate:
    post:
      summary: Validate import storage
      description: >
        
        Validate a specific Azure import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.

  "/api/storages/azure/{id}":
    get:
      summary: Get import storage
      description: >
        
        Get a specific Azure import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete import storage
      description: >
        
        Delete a specific Azure import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.
        
        
        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update import storage
      description: >
        
        Update a specific Azure import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/azure/{id}/sync":
    post:
      summary: Sync import storage
      description: >
        
        Sync tasks from an Azure import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Sync operations with external containers only go one way. They either create tasks from objects in the container (source/import storage) or push annotations to the output container (export/target storage). Changing something on the Microsoft side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/gcs/:
    get:
      summary: List import storages
      description: >
        
        You can connect your Google Cloud Storage bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all Google import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create import storage
      description: >
        
        Create a new source storage connection to a Google Cloud Storage bucket. 
        
        
        For information about the required fields and prerequisites, see [Google Cloud Storage](https://labelstud.io/guide/storage#Google-Cloud-Storage) in the Label Studio documentation. 


        <Info>Ensure you configure CORS before adding cloud storage. This ensures you will be able to see the content of the data rather than just a link.</Info>


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>

  /api/storages/gcs/validate:
    post:
      summary: Validate import storage
      description: >
        
        Validate a specific GCS import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.

  "/api/storages/gcs/{id}":
    get:
      summary: Get import storage
      description: >
        
        Get a specific GCS import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    patch:
      summary: Update import storage
      description: >
        
        Update a specific GCS import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete import storage
      description: >
        
        Delete a specific GCS import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.
        
        
        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 

  "/api/storages/gcs/{id}/sync":
    post:
      summary: Sync import storage
      description: >
        
        Sync tasks from a GCS import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Sync operations with external buckets only go one way. They either create tasks from objects in the bucket (source/import storage) or push annotations to the output bucket (export/target storage). Changing something on the bucket side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/localfiles/:
    get:
      summary: List import storages
      description: >
        
        If you have local files that you want to add to Label Studio from a specific directory, you can set up a specific local directory on the machine where LS is running as source or target storage. Use this API request to get a list of all local file import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create import storage
      description: >
        
        Create a new source storage connection to a local file directory. 
        
        
        For information about the required fields and prerequisites, see [Local storage](https://labelstud.io/guide/storage#Local-storage) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>

  /api/storages/localfiles/validate:
    post:
      summary: Validate import storage
      description: >
        
        Validate a specific local file import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.

  "/api/storages/localfiles/{id}":
    get:
      summary: Get import storage
      description: >
        
        Get a specific local file import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    patch:
      summary: Update import storage
      description: >
        
        Update a specific local import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete import storage
      description: >
        
        Delete a specific local import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.
        
        
        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 

  "/api/storages/localfiles/{id}/sync":
    post:
      summary: Sync import storage
      description: >
        
        Sync tasks from a local import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Sync operations with external sources only go one way. They either create tasks from objects in the source directory (source/import storage) or push annotations to the output directory (export/target storage). Changing something on the local file side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/redis/:
    get:
      summary: List import storages
      description: >
        
        You can connect your Redis database to Label Studio as a source storage or target storage. Use this API request to get a list of all Redis import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create import storage
      description: >
        
        Create a new source storage connection to a Redis database. 
        
        
        For information about the required fields and prerequisites, see [Redis database](https://labelstud.io/guide/storage#Redis-database) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>

  /api/storages/redis/validate:
    post:
      summary: Validate import storage
      description: >
        
        Validate a specific Redis import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.

  "/api/storages/redis/{id}":
    get:
      summary: Get import storage
      description: >
        
        Get a specific Redis import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    patch:
      summary: Update import storage
      description: >
        
        Update a specific Redis import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete import storage
      description: >
        
        Delete a specific Redis import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.
        
        
        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 

  "/api/storages/redis/{id}/sync":
    post:
      summary: Sync import storage
      description: >
        
        Sync tasks from a Redis import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Sync operations with external databases only go one way. They either create tasks from objects in the database (source/import storage) or push annotations to the output database (export/target storage). Changing something on the database side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/s3/:
    get:
      summary: List import storages
      description: >
        
        You can connect your S3 bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all Google import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create import storage
      description: >
        
        Create a new source storage connection to a S3 bucket. 
        
        
        For information about the required fields and prerequisites, see [Amazon S3](https://labelstud.io/guide/storage#Amazon-S3) in the Label Studio documentation. 


        <Info>Ensure you configure CORS before adding cloud storage. This ensures you will be able to see the content of the data rather than just a link.</Info>


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>

  /api/storages/s3/validate:
    post:
      summary: Validate import storage
      description: >
        
        Validate a specific S3 import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.

  "/api/storages/s3/{id}":
    get:
      summary: Get import storage
      description: >
        
        Get a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    patch:
      summary: Update import storage
      description: >
        
        Update a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete import storage
      description: >
        
        Delete a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.
        
        
        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 

  "/api/storages/s3/{id}/sync":
    post:
      summary: Sync import storage
      description: >
        
        Sync tasks from an S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list). 


        Sync operations with external buckets only go one way. They either create tasks from objects in the bucket (source/import storage) or push annotations to the output bucket (export/target storage). Changing something on the bucket side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note>

  /api/storages/s3s:
    get:
      summary: List import storages
      description: >
        
        You can connect your S3 bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all Google import (source) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
      parameters:
        - name: project
          in: query
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/S3SImportStorage"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      summary: Create import storage
      description: >

        Create a new source storage connection to a S3 bucket.


        For information about the required fields and prerequisites, see [Amazon S3](https://labelstud.io/guide/storage#Amazon-S3) in the Label Studio documentation.


        <Info>Ensure you configure CORS before adding cloud storage. This ensures you will be able to see the content of the data rather than just a link.</Info>


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be imported until you [sync your connection](sync).</Tip>
      requestBody:
        $ref: "#/components/requestBodies/api_storages_s3s_createData"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SImportStorage"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
  /api/storages/s3s/{id}:
    get:
      summary: Get import storage
      description: >
        
        Get a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list).
      parameters:
        - name: id
          in: path
          description: Import storage ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SImportStorage"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      summary: Update import storage
      description: >

        Update a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list).


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
      parameters:
        - name: id
          in: path
          description: Import storage ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/api_storages_s3s_createData"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SImportStorage"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      summary: Delete import storage
      description: >

        Delete a specific S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list).


        Deleting a source storage connection does not affect tasks with synced data in Label Studio. The sync process is designed to import new or updated tasks from the connected storage into the project, but it does not track deletions of files from the storage. Therefore, if you remove the external storage connection, the tasks that were created from that storage will remain in the project.


        If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API.
      parameters:
        - name: id
          in: path
          description: Import storage ID
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Storage deleted"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public
  /api/storages/s3s/validate:
    post:
      summary: Validate import storage
      description: >

        Validate a specific S3 import storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to import data.
      requestBody:
        $ref: "#/components/requestBodies/api_storages_s3s_createData"
      responses:
        "200":
          description: "Validation successful"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: validate
      x-fern-audiences:
        - public
  /api/storages/s3s/{id}/sync:
    post:
      summary: Sync import storage
      description: >

        Sync tasks from an S3 import storage connection. You will need to provide the import storage ID. You can find this using [List import storages](list).
      parameters:
        - name: id
          in: path
          description: Storage ID
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SImportStorage"
      x-fern-sdk-group-name:
        - import_storage
        - s3s
      x-fern-sdk-method-name: sync
      x-fern-audiences:
        - public


  /api/storages/export/s3s:
    get:
      summary: List export storages
      description: >
        
        You can connect your S3 bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all S3 export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
      parameters:
        - name: project
          in: query
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/S3SExportStorage"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public

    post:
      summary: Create export storage
      description: >
        
        Create a new target storage connection to a S3 bucket with IAM role access.
        
        
        For information about the required fields and prerequisites, see [Amazon S3](https://docs.humansignal.com/guide/storage#Set-up-an-S3-connection-with-IAM-role-access) in the Label Studio documentation.
      requestBody:
        $ref: "#/components/requestBodies/api_storages_export_s3s_createData"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SExportStorage"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
  /api/storages/export/s3s/{id}:
    get:
      summary: Get export storage
      description: >
        
        Get a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list).
      parameters:
        - name: id
          in: path
          description: Export storage ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SExportStorage"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      summary: Update export storage
      description: >
        
        Update a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list).
      parameters:
        - name: id
          in: path
          description: Export storage ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/api_storages_export_s3s_createData"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3SExportStorage"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list).
      parameters:
        - name: id
          in: path
          description: Export storage ID
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Storage deleted"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/storages/export/s3s/validate:
    post:
      summary: Validate export storage
      description: >

        Validate a specific S3 export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.
      requestBody:
        $ref: "#/components/requestBodies/api_storages_export_s3s_createData"
      responses:
        "200":
          description: "Validation successful"
      x-fern-sdk-group-name:
        - export_storage
        - s3s
      x-fern-sdk-method-name: validate
      x-fern-audiences:
        - public

  /api/storages/export/azure:
    get:
      summary: List export storages
      description: >
        
        You can connect your Microsoft Azure Blob storage container to Label Studio as a source storage or target storage. Use this API request to get a list of all Azure export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new target storage connection to Microsoft Azure Blob storage. 
        
        
        For information about the required fields and prerequisites, see [Microsoft Azure Blob storage](https://labelstud.io/guide/storage#Microsoft-Azure-Blob-storage) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be exported until you [sync your connection](sync).</Tip>

  /api/storages/export/azure/validate:
    post:
      summary: Validate export storage
      description: >
        
        Validate a specific Azure export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.

  "/api/storages/export/azure/{id}":
    get:
      summary: Get export storage
      description: >
        
        Get a specific Azure export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific Azure export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Deleting an export/target storage connection does not affect tasks with synced data in Label Studio. If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update export storage
      description: >
        
        Update a specific Azure export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/export/azure/{id}/sync":
    post:
      summary: Sync export storage
      description: >
        
        Sync tasks to an Azure export/target storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Sync operations with external containers only go one way. They either create tasks from objects in the container (source/import storage) or push annotations to the output container (export/target storage). Changing something on the Microsoft side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/export/gcs:
    get:
      summary: List export storages
      description: >
        
        You can connect your Google Cloud Storage bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all GCS export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new target storage connection to Google Cloud Storage. 
        
        
        For information about the required fields and prerequisites, see [Google Cloud Storage](https://labelstud.io/guide/storage#Google-Cloud-Storage) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be exported until you [sync your connection](sync).</Tip>

  /api/storages/export/gcs/validate:
    post:
      summary: Validate export storage
      description: >
        
        Validate a specific GCS export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.

  "/api/storages/export/gcs/{id}":
    get:
      summary: Get export storage
      description: >
        
        Get a specific GCS export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific GCS export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Deleting an export/target storage connection does not affect tasks with synced data in Label Studio. If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update export storage
      description: >
        
        Update a specific GCS export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/export/gcs/{id}/sync":
    post:
      summary: Sync export storage
      description: >
        
        Sync tasks to a GCS export/target storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Sync operations with external buckets only go one way. They either create tasks from objects in the bucket (source/import storage) or push annotations to the output bucket (export/target storage). Changing something on the bucket side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/export/s3:
    get:
      summary: List export storages
      description: >
        
        You can connect your S3 bucket to Label Studio as a source storage or target storage. Use this API request to get a list of all S3 export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new target storage connection to S3 storage. 
        
        
        For information about the required fields and prerequisites, see [Amazon S3](https://labelstud.io/guide/storage#Amazon-S3) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be exported until you [sync your connection](sync).</Tip>

  /api/storages/export/s3/validate:
    post:
      summary: Validate export storage
      description: >
        
        Validate a specific S3 export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.

  "/api/storages/export/s3/{id}":
    get:
      summary: Get export storage
      description: >
        
        Get a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Deleting an export/target storage connection does not affect tasks with synced data in Label Studio. If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update export storage
      description: >
        
        Update a specific S3 export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/export/s3/{id}/sync":
    post:
      summary: Sync export storage
      description: >
        
        Sync tasks to an S3 export/target storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Sync operations with external buckets only go one way. They either create tasks from objects in the bucket (source/import storage) or push annotations to the output bucket (export/target storage). Changing something on the bucket side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/export/redis:
    get:
      summary: List export storages
      description: >
        
        You can connect your Redis database to Label Studio as a source storage or target storage. Use this API request to get a list of all Redis export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new target storage connection to Redis. 
        
        
        For information about the required fields and prerequisites, see [Redis database](https://labelstud.io/guide/storage#Redis-database) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be exported until you [sync your connection](sync).</Tip>

  /api/storages/export/redis/validate:
    post:
      summary: Validate export storage
      description: >
        
        Validate a specific Redis export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.

  "/api/storages/export/redis/{id}":
    get:
      summary: Get export storage
      description: >
        
        Get a specific Redis export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific Redis export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Deleting an export/target storage connection does not affect tasks with synced data in Label Studio. If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update export storage
      description: >
        
        Update a specific Redis export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/export/redis/{id}/sync":
    post:
      summary: Sync export storage
      description: >
        
        Sync tasks to an Redis export/target storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Sync operations with external databases only go one way. They either create tasks from objects in the database (source/import storage) or push annotations to the output database (export/target storage). Changing something on the database side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/storages/export/localfiles:
    get:
      summary: List export storages
      description: >
        
        You can connect a local file directory to Label Studio as a source storage or target storage. Use this API request to get a list of all local file export (target) storage connections for a specific project. 


        The project ID can be found in the URL when viewing the project in Label Studio, or you can retrieve all project IDs using [List all projects](../projects/list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    post:
      summary: Create new storage
      description: >
        
        Create a new target storage connection to a local file directory. 
        
        
        For information about the required fields and prerequisites, see [Local storage](https://labelstud.io/guide/storage#Local-storage) in the Label Studio documentation. 


        <Tip>After you add the storage, you should validate the connection before attempting to sync your data. Your data will not be exported until you [sync your connection](sync).</Tip>

  /api/storages/export/localfiles/validate:
    post:
      summary: Validate export storage
      description: >
        
        Validate a specific local file export storage connection. This is useful to ensure that the storage configuration settings are correct and operational before attempting to export data.

  "/api/storages/export/localfiles/{id}":
    get:
      summary: Get export storage
      description: >
        
        Get a specific local file export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).
    delete:
      summary: Delete export storage
      description: >
        
        Delete a specific local file export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Deleting an export/target storage connection does not affect tasks with synced data in Label Studio. If you want to remove the tasks that were synced from the external storage, you will need to delete them manually from within the Label Studio UI or use the [Delete tasks](../../tasks/delete-all-tasks) API. 
    patch:
      summary: Update export storage
      description: >
        
        Update a specific local file export storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        For more information about working with external storage, see [Sync data from external storage](https://labelstud.io/guide/storage).

  "/api/storages/export/localfiles/{id}/sync":
    post:
      summary: Sync export storage
      description: >
        
        Sync tasks to an local file export/target storage connection. You will need to provide the export storage ID. You can find this using [List export storages](list). 


        Sync operations with external local file directories only go one way. They either create tasks from objects in the directory (source/import storage) or push annotations to the output directory (export/target storage). Changing something on the local file side doesn’t guarantee consistency in results.


        <Note>Before proceeding, you should review [How sync operations work - Source storage](https://labelstud.io/guide/storage#Source-storage) to ensure that your data remains secure and private.</Note> 

  /api/webhooks/:
    get:
      summary: List all webhooks
      description: >
        
        List all webhooks set up for your organization. 
        
        
        Webhooks in Label Studio let you set up integrations that subscribe to certain events that occur inside Label Studio. When an event is triggered, Label Studio sends an HTTP POST request to the configured webhook URL. 
        
        
        For more information, see [Set up webhooks in Label Studio](https://labelstud.io/guide/webhooks). 
    post:
      summary: Create a webhook
      description: >
        
        Create a webhook. 
        
        Label Studio provides several out-of-the box webhook events, which you can find listed here: [Available Label Studio webhooks](https://labelstud.io/guide/webhooks#Available-Label-Studio-webhooks). 


        If you want to create your own custom webhook, refer to [Create custom events for webhooks in Label Studio](https://labelstud.io/guide/webhook_create).


        <Note>Label Studio makes two main types of events available to integrate with webhooks: project-level task events and organization events. If you want to use organization-level webhook events, you will need to set `LABEL_STUDIO_ALLOW_ORGANIZATION_WEBHOOKS=true`. </Note>
  /api/webhooks/info/:
    get:
      summary: Get all webhook actions
      description: >
        
        Get descriptions of all available webhook actions to set up webhooks. For more information, see the [Webhook event reference](https://labelstud.io/guide/webhook_reference).

  "/api/webhooks/{id}/":
    get:
      summary: Get webhook info
      description: >
        
        Get information about a specific webhook. You will need to provide the webhook ID. You can get this from [List all webhooks](list).


        For more information about webhooks, see [Set up webhooks in Label Studio](https://labelstud.io/guide/webhooks) and the [Webhook event reference](https://labelstud.io/guide/webhook_reference).

    delete:
      summary: Delete webhook
      description: >
        
        Delete a webhook. You will need to provide the webhook ID. You can get this from [List all webhooks](list).


        For more information about webhooks, see [Set up webhooks in Label Studio](https://labelstud.io/guide/webhooks) and the [Webhook event reference](https://labelstud.io/guide/webhook_reference).
    patch:
      summary: Update webhook info
      description: >
        
        Update a webhook. You will need to provide the webhook ID. You can get this from [List all webhooks](list).


        For more information about webhooks, see [Set up webhooks in Label Studio](https://labelstud.io/guide/webhooks) and the [Webhook event reference](https://labelstud.io/guide/webhook_reference).


  /api/workspaces:
    get:
      summary: List workspaces
      description: >
        
        List all workspaces for your organization. 
        
        
        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization. 
        
        
        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"
      x-fern-sdk-group-name: workspaces
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      summary: Create workspace
      description: >
        
        Create a new workspace.
        
        
        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.
        
        
        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).
      requestBody:
        $ref: '#/components/requestBodies/api_workspaces_createData'
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
      x-fern-sdk-group-name: workspaces
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public

  /api/workspaces/{id}:
    get:
      summary: Get workspace
      description: >
        
        Get information about a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
      x-fern-sdk-group-name: workspaces
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    patch:
      summary: Update workspace
      description: >
        
        Update a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/api_workspaces_createData'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
      x-fern-sdk-group-name: workspaces
      x-fern-sdk-method-name: update
      x-fern-audiences:
        - public
    delete:
      summary: Delete workspace
      description: >
        
        Delete a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Workspace deleted"
      x-fern-sdk-group-name: workspaces
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public

  /api/workspaces/{id}/memberships:
    get:
      summary: List workspace memberships
      description: >
        
        List all workspace memberships for a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      description: User ID of the workspace member
      x-fern-sdk-group-name:
        - workspaces
        - members
      x-fern-sdk-method-name: list
      x-fern-audiences:
        - public
    post:
      summary: Create workspace membership
      description: >
        
        Create a new workspace membership. You will need to provide the workspace ID. You can find this using [List workspaces](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                  description: User ID of the workspace member
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: integer
                    description: User ID of the workspace member
      x-fern-sdk-group-name:
        - workspaces
        - members
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
    delete:
      summary: Delete workspace membership
      description: >
        
        Delete a specific workspace membership. You will need to provide the workspace ID and the user ID. You can find this using [List workspace memberships](list).
      parameters:
        - name: id
          in: path
          description: Workspace ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                  description: User ID of the workspace member
      responses:
        "204":
        description: "Membership deleted"
      x-fern-sdk-group-name:
        - workspaces
        - members
      x-fern-sdk-method-name: delete
      x-fern-audiences:
        - public
  /api/annotations/bulk:
    post:
      $ref: "./resources/annotations.yaml#/paths/~1api~1annotations~1bulk/post"
      x-fern-sdk-group-name: annotations
      x-fern-sdk-method-name: createBulk
      x-fern-audiences:
        - public
  "/api/organizations/{id}/memberships/{user_pk}/":
    get:
      operationId: api_organizations_memberships_read
      summary: Get organization member details
      description: Get organization member details by user ID.
      parameters:
        - name: user_pk
          in: path
          description: A unique integer value identifying the user to get organization details for.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationMember"
      tags:
        - Organizations
      x-fern-sdk-group-name:
        - organizations
        - members
      x-fern-sdk-method-name: get
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: user_pk
        in: path
        required: true
        schema:
          type: string
  /api/token/blacklist:
    post:
      $ref: ./resources/tokens.yaml#/paths/~1api~1token~1blacklist/post
      x-fern-sdk-group-name: tokens
      x-fern-sdk-method-name: blacklist
      x-fern-audiences:
        - public
  /api/token:
    get:
      $ref: ./resources/tokens.yaml#/paths/~1api~1token/get
      x-fern-sdk-group-name: tokens
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    post:
      $ref: ./resources/tokens.yaml#/paths/~1api~1token/post
      x-fern-sdk-group-name: tokens
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
  /api/jwt/settings:
    get:
      $ref: ./resources/tokens.yaml#/paths/~1api~1jwt~1settings/get
      x-fern-sdk-group-name: jwt_settings
      x-fern-sdk-method-name: get
      x-fern-audiences:
        - public
    post:
      $ref: ./resources/tokens.yaml#/paths/~1api~1jwt~1settings/post
      x-fern-sdk-group-name: jwt_settings
      x-fern-sdk-method-name: create
      x-fern-audiences:
        - public
  /api/token/refresh:
    post:
      $ref: ./resources/tokens.yaml#/paths/~1api~1token~1refresh/post
      x-fern-sdk-group-name: tokens
      x-fern-sdk-method-name: refresh
      x-fern-audiences:
        - public
  /api/token/rotate:
    post:
      $ref: ./resources/tokens.yaml#/paths/~1api~1token~1rotate/post
      x-fern-sdk-group-name: tokens
      x-fern-sdk-method-name: rotate
      x-fern-audiences:
        - public
components:
  securitySchemes:
    Token:
      x-fern-header:
        name: api_key
        env: LABEL_STUDIO_API_KEY
        prefix: "Token "

  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the task
        predictions:
          type: array
          items:
            type: object
          description: Predictions for this task
        annotations:
          type: array
          items:
            type: object
          description: Annotations for this task
        drafts:
          type: array
          items:
            type: object
          description: Drafts for this task
        annotators:
          type: array
          items:
            anyOf:
              - type: integer
              - type: object
          description: List of annotators for this task
        inner_id:
          type: integer
          description: Inner ID of the task
        cancelled_annotations:
          type: integer
          description: Number of cancelled annotations for this task
        total_annotations:
          type: integer
          description: Total number of annotations for this task
        total_predictions:
          type: integer
          description: Total number of predictions for this task
        completed_at:
          type: string
          format: date-time
          description: Completion time of the task
        file_upload:
          type: string
          description: File upload ID for this task
        storage_filename:
          type: string
          description: Storage filename for this task
        avg_lead_time:
          type: number
          description: Average lead time for this task
        draft_exists:
          type: boolean
          description: Whether a draft exists for this task or not
        updated_by:
          type: array
          description: List of annotators' info who updated this task
          items:
            type: object
        data:
          type: object
          description: Data of the task
        meta:
          type: object
          description: Meta information of the task
        created_at:
          type: string
          format: date-time
          description: Creation time of the task
        updated_at:
          type: string
          format: date-time
          description: Last updated time of the task
        is_labeled:
          type: boolean
          description: Whether the task is labeled or not
        overlap:
          type: number
          description: Overlap for the task
        comment_count:
          type: integer
          description: Number of comments for this task
        unresolved_comment_count:
          type: integer
          description: Number of unresolved comments for this task
        last_comment_updated_at:
          type: string
          format: date-time
          description: Last updated time of the comments for this task
        project:
          type: integer
          description: Project ID for this task
        comment_authors:
          type: array
          items:
            oneOf:
              - type: integer
              - type: object
                additionalProperties: true
          description: List of comment authors for this task
    Workspace:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the workspace
          readOnly: true
        title:
          type: string
          description: Workspace title
        description:
          type: string
          description: Workspace description
        is_public:
          type: boolean
          description: Whether the workspace is public or not
        is_personal:
          type: boolean
          description: Whether the workspace is personal or not
        is_archived:
          type: boolean
          description: Whether the workspace is archived or not
        created_at:
          type: string
          format: date-time
          description: Creation time of the workspace
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Last updated time of the workspace
          readOnly: true
        created_by:
          type: integer
          description: User ID of the workspace creator
          readOnly: true
        color:
          type: string
          description: Workspace color

    data_manager_task_serializer:
      properties:
        annotators:
          title: Annotators
          type: array
          readOnly: true
          description: Annotators who annotated this task
          items:
            type: object
            anyOf:
              - type: integer
              - type: object
    BaseTask:
      properties:
        file_upload:
          type: object
          anyOf:
            - type: string
              title: File upload
              description: Uploaded file used as data source for this task
              nullable: true
            - type: integer
              title: File upload ID
              description: Uploaded file ID used as data source for this task
              nullable: true
        updated_by:
          type: object
          anyOf:
            - type: integer
              title: Updated by
              description: Last annotator who updated this task
              nullable: true
            - type: array
              title: Updated by
              description: Last annotators or reviewers who updated this task
              items:
                type: object
              nullable: true
    S3SImportStorage:
      required:
        - project
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        synchronizable:
          title: Synchronizable
          type: boolean
          default: true
        presign:
          title: Presign
          type: boolean
          default: true
        last_sync:
          title: Last sync
          description: Last sync finished time
          type: string
          format: date-time
          nullable: true
        last_sync_count:
          title: Last sync count
          description: Count of tasks synced last time
          type: integer
          nullable: true
        last_sync_job:
          title: Last_sync_job
          description: Last sync job ID
          type: string
          maxLength: 256
          nullable: true
        status:
          title: Status
          type: string
          enum:
            - initialized
            - queued
            - in_progress
            - failed
            - completed
        traceback:
          title: Traceback
          description: Traceback report for the last failed sync
          type: string
          nullable: true
        meta:
          title: Meta
          description: Meta and debug information about storage processes
          type: object
          nullable: true
        title:
          title: Title
          description: Cloud storage title
          type: string
          maxLength: 256
          nullable: true
        description:
          title: Description
          description: Cloud storage description
          type: string
          nullable: true
        created_at:
          title: Created at
          description: Creation time
          type: string
          format: date-time
          readOnly: true
        bucket:
          title: Bucket
          description: S3 bucket name
          type: string
          nullable: true
        prefix:
          title: Prefix
          description: S3 bucket prefix
          type: string
          nullable: true
        regex_filter:
          title: Regex_filter
          description: Cloud storage regex for filtering objects
          type: string
          nullable: true
        use_blob_urls:
          title: Use_blob_urls
          description: Interpret objects as BLOBs and generate URLs
          type: boolean
        region_name:
          title: Region_name
          description: AWS Region
          type: string
          nullable: true
        external_id:
          title: External ID
          description: AWS External ID
          type: string
          nullable: true
        role_arn:
          title: Role ARN
          description: AWS Role ARN
          type: string
          nullable: true
        s3_endpoint:
          title: S3_endpoint
          description: S3 Endpoint
          type: string
          nullable: true
        presign_ttl:
          title: Presign_ttl
          description: Presigned URLs TTL (in minutes)
          type: integer
        recursive_scan:
          title: Recursive scan
          description: Perform recursive scan over the bucket content
          type: boolean
        project:
          title: Project
          description: A unique integer value identifying this project.
          type: integer
    S3SExportStorage:
      required:
        - project
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        title:
          title: Title
          description: Cloud storage title
          type: string
          maxLength: 256
          nullable: true
        description:
          title: Description
          description: Cloud storage description
          type: string
          nullable: true
        created_at:
          title: Created at
          description: Creation time
          type: string
          format: date-time
          readOnly: true
        bucket:
          title: Bucket
          description: S3 bucket name
          type: string
          nullable: true
        prefix:
          title: Prefix
          description: S3 bucket prefix
          type: string
          nullable: true
        external_id:
          title: External ID
          description: AWS External ID
          type: string
          nullable: true
        role_arn:
          title: Role ARN
          description: AWS Role ARN
          type: string
          nullable: true
        region_name:
          title: Region_name
          description: AWS Region
          type: string
          nullable: true
        s3_endpoint:
          title: S3_endpoint
          description: S3 Endpoint
          type: string
          nullable: true
        project:
          title: Project
          description: A unique integer value identifying this project.
          type: integer
    OrganizationMember:
      required:
        - user
        - organization
      type: object
      properties:
        user:
          title: User
          description: User ID
          type: integer
        organization:
          title: Organization
          description: Organization ID
          type: integer
        contributed_projects_count:
          title: Contributed projects count
          type: string
          readOnly: true
        annotations_count:
          title: Annotations count
          type: string
          readOnly: true
        created_at:
          title: Created at
          type: string
          format: date-time
          readOnly: true
  requestBodies:
    api_storages_s3s_createData:
      content:
        application/json:
          schema:
            type: object
            properties:
              regex_filter:
                description: Cloud storage regex for filtering objects. You must specify it
                  otherwise no objects will be imported.
                type: string
              use_blob_urls:
                description: Interpret objects as BLOBs and generate URLs. For example, if your
                  bucket contains images, you can use this option to generate
                  URLs for these images. If set to False, it will read the
                  content of the file and load it into Label Studio.
                type: boolean
                default: false
              presign:
                description: Presign URLs for download
                type: boolean
                default: true
              presign_ttl:
                description: Presign TTL in minutes
                type: integer
                default: 1
              recursive_scan:
                description: Scan recursively
                type: boolean
              title:
                description: Storage title
                type: string
              description:
                description: Storage description
                type: string
              project:
                description: Project ID
                type: integer
              bucket:
                description: S3 bucket name
                type: string
              prefix:
                description: S3 bucket prefix
                type: string
              external_id:
                description: AWS External ID
                type: string
              role_arn:
                description: AWS Role ARN
                type: string
              region_name:
                description: AWS Region
                type: string
              s3_endpoint:
                description: S3 Endpoint
                type: string
      required: true

    api_storages_export_s3s_createData:
      content:
        application/json:
          schema:
            type: object
            properties:
              can_delete_objects:
                description: Deletion from storage enabled.
                type: boolean
              title:
                description: Storage title
                type: string
              description:
                description: Storage description
                type: string
              project:
                description: Project ID
                type: integer
              bucket:
                description: S3 bucket name
                type: string
              prefix:
                description: S3 bucket prefix
                type: string
              external_id:
                description: AWS External ID
                type: string
              role_arn:
                description: AWS Role ARN
                type: string
              region_name:
                description: AWS Region
                type: string
              s3_endpoint:
                description: S3 Endpoint
                type: string
      required: true

    api_projects_createData:
      content:
        application/json:
          schema:
            title: Project
            description: Project
            type: object
            properties:
              title:
                title: title
                description: Project title
                type: string
                example: My project
              description:
                title: description
                description: Project description
                type: string
                example: My first project
              label_config:
                title: label_config
                description: Label config in XML format
                type: string
                example: <View>[...]</View>
              expert_instruction:
                title: expert_instruction
                description: Labeling instructions to show to the user
                type: string
                example: Label all cats
              show_instruction:
                title: show_instruction
                description: Show labeling instructions
                type: boolean
              show_skip_button:
                title: show_skip_button
                description: Show skip button
                type: boolean
              enable_empty_annotation:
                title: enable_empty_annotation
                description: Allow empty annotations
                type: boolean
              show_annotation_history:
                title: show_annotation_history
                description: Show annotation history
                type: boolean
              reveal_preannotations_interactively:
                title: reveal_preannotations_interactively
                description: Reveal preannotations interactively. If set to True, predictions
                  will be shown to the user only after selecting the area of
                  interest
                type: boolean
              show_collab_predictions:
                title: show_collab_predictions
                description: Show predictions to annotators
                type: boolean
              maximum_annotations:
                title: maximum_annotations
                description: Maximum annotations per task
                type: integer
              color:
                title: color
                description: Project color in HEX format
                type: string
                default: "#FFFFFF"
              control_weights:
                title: control_weights
                description: >
                  Dict of weights for each control tag in metric calculation. Each
                  control tag (e.g. label or choice) will have its own key in
                  control weight dict with weight for each label and overall
                  weight. For example, if a bounding box annotation with a
                  control tag named my_bbox should be included with 0.33 weight
                  in agreement calculation, and the first label Car should be
                  twice as important as Airplane, then you need to specify:
                  {'my_bbox': {'type': 'RectangleLabels', 'labels': {'Car': 1.0,
                  'Airplane': 0.5}, 'overall': 0.33}}
                type: object
                example:
                  my_bbox:
                    type: RectangleLabels
                    labels:
                      Car: 1
                      Airplaine: 0.5
                    overall: 0.33
              workspace:
                title: workspace
                description: Workspace ID
                type: integer
              model_version:
                title: model_version
                description: Model version
                type: string
                example: 1.0
      required: true

    api_workspaces_createData:
      content:
        application/json:
          schema:
            title: Workspace
            description: Workspace
            type: object
            properties:
              title:
                title: title
                description: Workspace title
                type: string
                example: My workspace
              description:
                title: description
                description: Workspace description
                type: string
                example: My first workspace
              is_public:
                title: is_public
                description: Is workspace public
                type: boolean
              is_personal:
                title: is_personal
                description: Is workspace personal
                type: boolean
              color:
                title: color
                description: Workspace color in HEX format
                type: string
                default: "#FFFFFF"
              is_archived:
                title: is_archived
                description: Is workspace archived
                type: boolean
      required: true
>>>>>>> 1e8b0c52b3386abd850c1f83902fac917e40df90
